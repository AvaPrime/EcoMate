name: Scheduled Price Monitor

on:
  schedule:
    # Run daily at 9 AM UTC (adjust timezone as needed)
    - cron: '0 9 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  price-monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up environment variables
      env:
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
        MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
        MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
        MINIO_BUCKET: ${{ secrets.MINIO_BUCKET }}
        DOCS_REPO: ${{ secrets.DOCS_REPO }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        CURRENCY_DEFAULT: ${{ vars.CURRENCY_DEFAULT || 'ZAR' }}
        PRICE_DEVIATION_ALERT: ${{ vars.PRICE_DEVIATION_ALERT || '0.10' }}
        REQUEST_TIMEOUT_SEC: ${{ vars.REQUEST_TIMEOUT_SEC || '20' }}
      run: |
        echo "Environment variables configured"
    
    - name: Start Temporal server (background)
      run: |
        # Install Temporal CLI
        curl -sSf https://temporal.download/cli.sh | sh
        sudo mv temporal /usr/local/bin/
        
        # Start Temporal server in background
        temporal server start-dev --headless &
        
        # Wait for Temporal to be ready
        sleep 10
        
        # Verify Temporal is running
        temporal workflow list || echo "Temporal not ready yet, continuing..."
    
    - name: Start Temporal worker (background)
      run: |
        cd ${{ github.workspace }}
        python services/orchestrator/worker.py &
        
        # Give worker time to start
        sleep 5
      env:
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
        MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
        MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
        MINIO_BUCKET: ${{ secrets.MINIO_BUCKET }}
        DOCS_REPO: ${{ secrets.DOCS_REPO }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        CURRENCY_DEFAULT: ${{ vars.CURRENCY_DEFAULT || 'ZAR' }}
        PRICE_DEVIATION_ALERT: ${{ vars.PRICE_DEVIATION_ALERT || '0.10' }}
        REQUEST_TIMEOUT_SEC: ${{ vars.REQUEST_TIMEOUT_SEC || '20' }}
    
    - name: Run scheduled price monitoring
      run: |
        cd ${{ github.workspace }}
        python -c "
        import asyncio
        from temporalio.client import Client
        from services.orchestrator.price_workflows import ScheduledPriceMonitorWorkflow
        import uuid
        
        async def run_price_monitor():
            client = await Client.connect('localhost:7233')
            workflow_id = f'scheduled-price-monitor-{uuid.uuid4().hex[:8]}'
            
            handle = await client.start_workflow(
                ScheduledPriceMonitorWorkflow.run,
                id=workflow_id,
                task_queue='ecomate-ai',
            )
            
            result = await handle.result()
            print(f'Price monitoring completed: {result}')
            return result
        
        asyncio.run(run_price_monitor())
        "
      env:
        POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
        POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
        MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
        MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
        MINIO_BUCKET: ${{ secrets.MINIO_BUCKET }}
        DOCS_REPO: ${{ secrets.DOCS_REPO }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        CURRENCY_DEFAULT: ${{ vars.CURRENCY_DEFAULT || 'ZAR' }}
        PRICE_DEVIATION_ALERT: ${{ vars.PRICE_DEVIATION_ALERT || '0.10' }}
        REQUEST_TIMEOUT_SEC: ${{ vars.REQUEST_TIMEOUT_SEC || '20' }}
    
    - name: Upload price reports as artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: price-reports
        path: |
          data/price_report.csv
          data/price_history.csv
        retention-days: 30